name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate
      env:
        DATABASE_URL: "postgresql://fake:fake@fake:5432/fake?schema=public"

    - name: Run ESLint
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

    - name: Build check
      run: npm run build
      env:
        DATABASE_URL: "postgresql://fake:fake@fake:5432/fake?schema=public"
        API_KEY_SECRET: "fake-key"
        NEXT_PUBLIC_API_KEY_SECRET: "fake-key"
        NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: "fake-maps-key"

  e2e-tests:
    needs: lint-and-typecheck
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'test:e2e'))
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: loota_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Setup environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/loota_test?schema=public" >> $GITHUB_ENV
        echo "API_KEY_SECRET=test-api-key-for-ci" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_API_KEY_SECRET=test-api-key-for-ci" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY || 'test-maps-api-key' }}" >> $GITHUB_ENV

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy

    - name: Build application
      run: npm run build

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  deployment-ready:
    needs: [lint-and-typecheck, e2e-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Check if deployment ready
      run: |
        if [ "${{ needs.lint-and-typecheck.result }}" == "success" ] && 
           [ "${{ needs.e2e-tests.result }}" == "success" ] || [ "${{ needs.e2e-tests.result }}" == "skipped" ]; then
          echo "✅ Ready for deployment"
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
        else
          echo "❌ Not ready for deployment"
          echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
          exit 1
        fi
        
    - name: Create deployment summary
      run: |
        echo "# Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint & TypeCheck | ${{ needs.lint-and-typecheck.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || needs.e2e-tests.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Ready for Deploy | ${{ env.DEPLOYMENT_READY == 'true' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY